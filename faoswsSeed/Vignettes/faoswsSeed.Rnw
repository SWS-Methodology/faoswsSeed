%\VignetteIndexEntry{faoswsSeed: A package for the imputation of the seed domain for the Statistical Working System}
%\VignetteEngine{knitr::knitr}
\documentclass[nojss]{jss}
\usepackage{url}
\usepackage[sc]{mathpazo}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{breakurl}
\usepackage{hyperref}
\usepackage[ruled, vlined]{algorithm2e}
\usepackage{mathtools}
\usepackage{draftwatermark}
\usepackage{float}
\usepackage{placeins}
\usepackage{mathrsfs}
\usepackage{multirow}
%% \usepackage{mathbbm}
\DeclareMathOperator{\sgn}{sgn}
\DeclareMathOperator*{\argmax}{\arg\!\max}

\title{\bf faoswsSeed: A package for the imputation of
  the seed domain of the Statistical Working System}

\author{Joshua M. Browning, Michael. C. J. Kao\\ Food and Agriculture Organization \\ of
  the United Nations}

\Plainauthor{Joshua M. Browning, Michael. C. J. Kao} 

\Plaintitle{faoswsSeed: Package for imputation of the
  seed domain of the ESS Statistical Working System}

\Shorttitle{Seed Module}

\Abstract{ 

  This vignette provides detailed description of the usage of
  functions in the \pkg{faoswsSeed} package. \\
  
  There are two sections to this paper. The first is introductory, and provides
  a breif overview of the algorithm followed by this package.  The second
  section shows a sample execution of the module, and describes what each
  function is doing as execution proceeds.
  
}

\Keywords{Seed, Agriculture}
\Plainkeywords{Seed, Agriculture}

\Address{
  Joshua M. Browning\\
  Economics and Social Statistics Division (ESS)\\
  Economic and Social Development Department (ES)\\
  Food and Agriculture Organization of the United Nations (FAO)\\
  Viale delle Terme di Caracalla 00153 Rome, Italy\\
  E-mail: \email{joshua.browning@fao.org}\\
  URL: \url{https://github.com/rockclimber112358/sws_seed}
}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(fig.path = 'figure/', fig.align = 'center', fig.show = 'hold',
               warning = FALSE, message = FALSE, error = FALSE, tidy = FALSE,
               results = 'markup', eval = FALSE, echo = TRUE, cache = FALSE)
options(replace.assign = TRUE, width = 80)
assign("depthtrigger", 10, data.table:::.global)
@ 

\section{Introduction}

This algorithm follows this general process:

\begin{enumerate}
    \item Pull agricultural data from the database.
    \item Estimate the area sown for each year.
    \item Estimate the seed rate.
    \item Estimate the total seed used by multiplying the area sown by the seed
    rate.
    \item Push the updated data.table back to the database.
\end{enumerate}

\section{Example}

Before we begin, we will need to load the required library

<<loda-library, eval=TRUE>>=
## Load libraries
library(faosws)
#library(faoswsSeed)
files = dir("~/Documents/Github/sws_seed/faoswsSeed/R/", full.names = TRUE)
for(file in files) source(file)
library(faoswsUtil)
library(faoswsFlag)
library(data.table)
library(ggplot2)
@ 

\subsection{Pull Data}

Now, we need to get a data.table object from the working system.  To do this,
we'll need a token for the R session.  To get this token, you'll need to create
an .xml file that references the appropriate dataset: see the .xml file in the
sws_seed repository.  Alternatively, you can create an .xml file with the Code
tag set to agriculture and four SelectableDimension's: geographicAreaM49, 
measuredItemCPC, measuredElement, timePointYears.  Alternatively, you can use
the token in the code below.

<<>>=
## Pull in necessary swsContext parameters, see faosws documentation
GetTestEnvironment(
    baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
    token = "ec5a4b0e-0ffa-432e-9db0-ba08072c924b"
)
@

We may change the dataset of interest by updating the keys in the
\textit{swsContext.datasets[[1]]} object.  For example, let's look at Austria's
data instead (geographicAreaM49 code of ``40'').

<<>>=
swsContext.datasets[[1]]@dimensions$geographicAreaM49@keys = c("40")
@

Now, pull the seed dataset.

<<>>=
data = getAreaData(dataContext = swsContext.datasets[[1]],
                   areaSownElementCode = "5212",
                   areaHarvestedElementCode = "5312",
                   seedElementCode = "5525")
head(data, 1)
@

The data is somewhat cryptic, as there are alot of codes used, but it's there.

\subsection{Estimate Area Sown}

Next, we need to impute the missing values.  Imputation follows one of two
methods:
\begin{enumerate}
    \item If no area sown values exist, the area sown is imputed as the area
    harvested.
    \item If some area sown values exist, then an average ratio is computed
    across all non-missing values: $R = $(area sown) / (area harvested).
    Missing values for area sown are then imputed by taking the area harvested
    and multiplying by this ratio.
\end{enumerate}

In this example, we have the first scenario (remember, 5212 is the area sown
code and 5312 is the area harvested).

<<>>=
data[, Value_measuredElement_5212]
imputeAreaSown(data = data)
data[, Value_measuredElement_5212]
data[, Value_measuredElement_5312]
@

\subsection{Estimate Seed Rate}

The next step in getting the seed usage is to estimate the seeding rate.  The
database stores two tables, default_seed_rate and specific_seed_rate, which
contain estimates for seed rates.  The specific seed rate table contains values
for country commodity pairs, while the default seed rate contains average
values for commodities overall.  It would therefore be preferable to use the
specific_seed_rate table, but values are not always available for all
countries.  Thus, the default_seed_rate table is used when entries are not 
available in the specific_seed_rate table.

<<>>=
countrySpecificData = getCountrySpecificSeedRate()
head(countrySpecificData, 3)
data = fillCountrySpecificSeedRate(data = data,
    countrySpecificData = countrySpecificData)
head(data, 1)
data[, Value_seedRate]
@

The getCountrySpecificSeedRate function simply pulls the specific_seed_rate
table from the database.  This table is also the default value for
countrySpecificData in the fillCountrySpecificSeedRate function, but it is
manually created here for clarity.  The fillCountrySpecificSeedRate function
adds an additional two columns to data with the seedRate value and observation
flags.  In our small example, all seedRate values are the same because we only
have one country and one commodity.

<<>>=
generalSeedData = getCountryGeneralSeedRate()
head(generalSeedData, 3)
data = fillGeneralSeedRate(data = data,
    generalSeedData = generalSeedData)
head(data, 1)
data[, Value_seedRate]
@

Note that nothing has changed after running this second function.  This is
expected, as the seed rate value has been estimated from the specific data.

If the specific_seed_rate table had not provided a value for this
country/commodity pair, then the first code block in this section would have
set Value_seedRate to NA.  Then, this second code block would have updated the
NA to a default value from the default table.

\subsection{Estimate Seed Usage}

The seed usage is estimated by way of the imputeSeed function:

<<>>=
data[, Value_measuredElement_5525]
imputeSeed(data)
data[, Value_measuredElement_5525]
data[, Value_measuredElement_5312]
@

Note that only one seed has been imputed (code 5525).  To understand why, note
that area sown is available for all years except the last year.  But, area sown
on year $t$ corresponds to seed usage on year $t-1$, thus we don't have enough
valid observations to impute either of the last two seed usages.  These values
remain empty, as seen above.

\subsection{Push data back to database}

Lastly, we must push the imputed data back to the database.  This is done via
the saveSeedData function.

<<>>=
saveSeedData(data)
@

Note: this function assumes certain swsContext files exist within your
workspace, although it does not require you to pass them to it.  So, be careful
not to rm those files!

\end{document}
